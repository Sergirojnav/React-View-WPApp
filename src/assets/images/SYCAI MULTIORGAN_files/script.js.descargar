function toggleTable() {
    var tableContainer = document.querySelector(".show-table");
    var viewButton = document.getElementById("viewButton");

    if (tableContainer.style.display === "none") {
        tableContainer.style.display = "block";
        viewButton.style.display = "none"; // Oculta el botón
    } else {
        tableContainer.style.display = "none";
        viewButton.style.display = "block"; // Vuelve a mostrar el botón
    }
}

function callUrlImage(lesion) {
    const url = 'https://viewer.sycaimedical.com/pacs/instances/' + lesion.instanceId + '/rendered';

    window.location.href = url;
}

// Función para convertir un byte array a una cadena base64
function byteArrayToBase64(byteArray) {
    let binary = '';
    let len = byteArray.byteLength;
    for (let i = 0; i < len; i++) {
        binary += String.fromCharCode(byteArray[i]);
    }
    return window.btoa(binary);
}

function fillPancreasLesionInfo() {
    var carousel = document.getElementById('carouselPancreas');
        var titleElement = document.getElementById('lesionNumber3');

    // Generar elementos image-item y botones basados en reportData
    reportDataJson.cyst_p_parts.forEach(function(lesion, index) {
        var imageColumn = document.createElement('div');
        imageColumn.classList.add('image-column');
        var imageItem = document.createElement('div');
        imageItem.classList.add('image-item');
        var image = document.createElement('img');
        image.style.width = '150px';
        image.style.display = 'flex';
        // Crea una URL de datos a partir de la cadena base64
        let imageSrc = 'data:image/png;base64,' + lesion.image;
        image.src = imageSrc;
        if(index == 0){
            document.getElementById('imgSliceSelectedP').src = imageSrc;
        }
        var button = document.createElement('button');
        button.style.width = '150px';
        button.textContent = 'FINDING ' + (index + 1);



        button.addEventListener('click', function() {
            // Actualizar información de la lesión al hacer clic en el botón
            titleElement.textContent = index + 1;
            updateLesionInfo(lesion, reportDataJson);
        });

        imageItem.appendChild(image);
        imageItem.appendChild(button);
        imageColumn.appendChild(imageItem);
        carousel.appendChild(imageColumn);
    });

    function updateLesionInfo(lesion, reportData) {
        document.getElementById('datePInfo').textContent = reportData.date;
        document.getElementById('modalityPInfo').textContent = reportData.modality;
        document.getElementById('slicePInfo').textContent = lesion.slice;
        document.getElementById('volumePInfo').textContent = lesion.voxels;
        document.getElementById('positionPInfo').textContent = lesion.location;
        document.getElementById('majorAxisPInfo').textContent = lesion.major_axis;
        // Crea una URL de datos a partir de la cadena base64
        let imageSrc = 'data:image/png;base64,' + lesion.image;
        document.getElementById('imgSliceSelectedP').src = imageSrc;
    }
}

function fillLiverLesionInfo() {
    var carousel = document.getElementById('carouselLiver');
    var titleElement = document.getElementById('lesionNumber');

    // Generar elementos image-item y botones basados en reportData
    reportDataJson.cyst_l_parts.forEach(function(lesion, index) {
        var imageColumn = document.createElement('div');
        imageColumn.classList.add('image-column');
        var imageItem = document.createElement('div');
        imageItem.classList.add('image-item');
        var image = document.createElement('img');
        image.style.width = '150px';
        image.style.display = 'flex';
        // Crea una URL de datos a partir de la cadena base64
        let imageSrc = 'data:image/png;base64,' + lesion.image;
        image.src = imageSrc;
        if(index == 0){
            document.getElementById('imgSliceSelectedL').src = imageSrc;
        }
        var button = document.createElement('button');
        button.style.width = '150px';
        button.textContent = 'FINDING ' + (index + 1);



        button.addEventListener('click', function() {
            // Actualizar información de la lesión al hacer clic en el botón
            titleElement.textContent = index + 1;
            updateLesionInfo(lesion, reportDataJson);
        });

        imageItem.appendChild(image);
        imageItem.appendChild(button);
        imageColumn.appendChild(imageItem);
        carousel.appendChild(imageColumn);
    });

    function updateLesionInfo(lesion, reportData) {
        document.getElementById('dateLInfo').textContent = reportData.date;
        document.getElementById('modalityLInfo').textContent = reportData.modality;
        document.getElementById('sliceLInfo').textContent = lesion.slice;
        document.getElementById('volumeLInfo').textContent = lesion.voxels;
        document.getElementById('positionLInfo').textContent = lesion.location;
        document.getElementById('majorAxisLInfo').textContent = lesion.major_axis;
        // Crea una URL de datos a partir de la cadena base64
        let imageSrc = 'data:image/png;base64,' + lesion.image;
        document.getElementById('imgSliceSelectedL').src = imageSrc;
    }
}
function fillKidneyLesionInfo() {
    var carousel = document.getElementById('carouselKidney');
    var titleElement = document.getElementById('lesionNumber2');

    // Generar elementos image-item y botones basados en reportData
    reportDataJson.cyst_k_parts.forEach(function(lesion, index) {
        var imageColumn = document.createElement('div');
        imageColumn.classList.add('image-column');
        var imageItem = document.createElement('div');
        imageItem.classList.add('image-item');
        var image = document.createElement('img');
        image.style.width = '150px';
        image.style.display = 'flex';
        // Crea una URL de datos a partir de la cadena base64
        let imageSrc = 'data:image/png;base64,' + lesion.image;
        image.src = imageSrc;
        if(index == 0){
            document.getElementById('imgSliceSelectedK').src = imageSrc;
        }
        var button = document.createElement('button');
        button.style.width = '150px';
        button.textContent = 'FINDING ' + (index + 1);



        button.addEventListener('click', function() {
            // Actualizar información de la lesión al hacer clic en el botón
            titleElement.textContent = index + 1;
            updateLesionInfo(lesion, reportDataJson);
        });

        imageItem.appendChild(image);
        imageItem.appendChild(button);
        imageColumn.appendChild(imageItem);
        carousel.appendChild(imageColumn);
    });

    function updateLesionInfo(lesion, reportData) {
        document.getElementById('dateKInfo').textContent = reportData.date;
        document.getElementById('modalityKInfo').textContent = reportData.modality;
        document.getElementById('sliceKInfo').textContent = lesion.slice;
        document.getElementById('volumeKInfo').textContent = lesion.voxels;
        document.getElementById('positionKInfo').textContent = lesion.location;
        document.getElementById('majorAxisKInfo').textContent = lesion.major_axis;
        // Crea una URL de datos a partir de la cadena base64
        let imageSrc = 'data:image/png;base64,' + lesion.image;
        document.getElementById('imgSliceSelectedK').src = imageSrc;
    }
}


function fillPancreasLesionsCurrentPrior() {
    const imagesContainer = document.getElementById('images_pancreas_container');

    function createImage(src, onClickHandler) {
        const img = document.createElement('img');
        const defaultImagePath = '/img/multiorgan/no_previous_lesion-no_bckg.png';
        img.src = src ? 'data:image/png;base64,' + src : defaultImagePath;
        img.addEventListener('click', onClickHandler);
        return img;
    }

    function createLesionSection(title, lesion, index, onClickHandler) {
        if (!lesion) return null;
        const lesionName = lesion.name.startsWith('c') ? lesion.name.substring(1) : lesion.name;
        const section = document.createElement('div');
        section.classList.add('lesion-section');
        const header = document.createElement('p');
        const formattedDate = reportMultiorgan[0].reportData.date != null ? reportMultiorgan[0].reportData.date : 'No Date';
        header.textContent = `${title} (${formattedDate})`;
        header.classList.add('header');
        const lesionNumber = document.createElement('h4');
        lesionNumber.textContent = `Finding P${index + 1}`; // Ajuste de numeración para el páncreas
        lesionNumber.classList.add('lesion-number');
        const image = createImage(lesion.image, onClickHandler);
        section.appendChild(lesionNumber);
        section.appendChild(image);
        section.appendChild(header);
        return section;
    }

    function createLesionTable(currentLesion, priorLesion) {
        const tableContainer = document.createElement('div');
        tableContainer.classList.add('table-container');
        const table = document.createElement('table');
        table.classList.add('lesion-table-chart');
        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th>PROPERTY</th>
                <th>CURRENT</th>
                ${priorLesion ? '<th>PRIOR</th>' : ''}
            </tr>
        `;

        const tbody = document.createElement('tbody');
        const rows = [
            { label: 'SLICE NUMBER', current: currentLesion.biggest_slice, prior: priorLesion ? priorLesion.biggest_slice : '-' },
            { label: 'VOLUME (mm&sup3)', current: currentLesion.voxels, prior: priorLesion ? priorLesion.voxels : '-' },
            { label: 'MAJOR AXIS (mm)', current: currentLesion.major_axis, prior: priorLesion ? priorLesion.major_axis : '-' },
            { label: 'POSITION', current: currentLesion.location, prior: priorLesion ? priorLesion.location : '-' },
        ];

        rows.forEach(row => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${row.label}</td>
                <td>${row.current || '-'}</td>
                ${priorLesion ? `<td>${row.prior || '-'}</td>` : ''}
            `;
            tbody.appendChild(tr);
        });

        if (priorLesion) {
            const evolutionRow = document.createElement('tr');
            evolutionRow.innerHTML = `
                <td>EVOLUTION</td>
                <td>${currentLesion.diff_major_axis}</td>
                <td>Baseline</td>
                `;
            tbody.appendChild(evolutionRow);
        }

        table.appendChild(thead);
        table.appendChild(tbody);
        tableContainer.appendChild(table);

        return tableContainer;
    }

    reportMultiorgan[0].reportData.cyst_p_parts.forEach((lesion, indexLesion) => {
        const container = document.createElement('div');
        container.classList.add('lesion-container');

        var headerContainer = document.createElement('div');
        headerContainer.classList.add('title');
        var h1 = document.createElement('h4');
        h1.textContent = 'SYCAI Findings - Follow-up';
        headerContainer.appendChild(h1);
        var h2 = document.createElement('h2');
        h2.textContent = 'ORGAN Pancreas';
        headerContainer.appendChild(h2);
        var h5 = document.createElement('h5');
        var span = document.createElement('span');
        span.textContent = reportDataJson.seriesNumber || 'Series Number';
        h5.textContent = 'SeNo: ';
        h5.appendChild(span);
        headerContainer.appendChild(h5);
        container.appendChild(headerContainer);
        const imagesRow = document.createElement('div');
        imagesRow.classList.add('images-row');
        const currentSection = createLesionSection("Current", lesion, indexLesion, () => callUrlImage(lesion));
        imagesRow.appendChild(currentSection);
        const priorLesion = (reportMultiorgan[1] && reportMultiorgan[1].reportData && reportMultiorgan[1].reportData.cyst_p_parts) ? reportMultiorgan[1].reportData.cyst_p_parts[indexLesion] : null;
        const priorSection = createLesionSection("Prior", priorLesion, indexLesion, () => callUrlImage(priorLesion));
        if (priorSection) imagesRow.appendChild(priorSection);
        const tableContainer = createLesionTable(lesion, priorLesion);
        container.appendChild(imagesRow);
        container.appendChild(tableContainer);
        imagesContainer.appendChild(container);
    });
}

function fillLiverLesionsCurrentPrior() {
    const imagesContainer = document.getElementById('images_liver_container');

     function createImage(src, onClickHandler, isDefault = false) {
         const img = document.createElement('img');
         const defaultImagePath = '/img/multiorgan/no_previous_lesion-no_bckg.png';
         img.src = src ? 'data:image/png;base64,' + src : defaultImagePath;
         img.style.width = isDefault ? '600px' : 'auto'; // Ajustar el tamaño de la imagen por defecto
         img.style.height = isDefault ? 'auto' : 'auto'; // Ajustar el tamaño de la imagen por defecto
         img.addEventListener('click', onClickHandler);
         return img;
     }

    function createLesionSection(title, lesion, index, onClickHandler) {
        const section = document.createElement('div');
        section.classList.add('lesion-section');
        const header = document.createElement('p');
        const formattedDate = reportMultiorgan[0].reportData.date != null ? reportMultiorgan[0].reportData.date : 'No Date';
        header.textContent = `${title} (${formattedDate})`;
        header.classList.add('header');
        const lesionNumber = document.createElement('h4');
        lesionNumber.textContent = lesion ? `Finding L${index + 1}` : ""; // Ajuste de numeración para el riñón
        lesionNumber.classList.add('lesion-number');
        const imageSrc = lesion && lesion.image ? lesion.image : null;
        const image = createImage(imageSrc, onClickHandler);
        section.appendChild(lesionNumber);
        section.appendChild(image);
        section.appendChild(header);

        return section;
    }

    function createLesionTable(currentLesion, priorLesion) {
        const tableContainer = document.createElement('div');
        tableContainer.classList.add('table-container');
        const table = document.createElement('table');
        table.classList.add('lesion-table-chart');
        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th>PROPERTY</th>
                <th>CURRENT</th>
                ${priorLesion ? '<th>PRIOR</th>' : ''}
            </tr>
        `;

        const tbody = document.createElement('tbody');
        const rows = [
            { label: 'SLICE NUMBER', current: currentLesion.biggest_slice, prior: priorLesion ? priorLesion.biggest_slice : '-' },
            { label: 'VOLUME (mm&sup3)', current: currentLesion.voxels, prior: priorLesion ? priorLesion.voxels : '-' },
            { label: 'MAJOR AXIS (mm)', current: currentLesion.major_axis, prior: priorLesion ? priorLesion.major_axis : '-' },
            { label: 'POSITION', current: currentLesion.location, prior: priorLesion ? priorLesion.location : '-' },
        ];

        rows.forEach(row => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${row.label}</td>
                <td>${row.current || '-'}</td>
                ${priorLesion ? `<td>${row.prior || '-'}</td>` : ''}
            `;
            tbody.appendChild(tr);
        });

        if (priorLesion) {
            const evolutionRow = document.createElement('tr');
            evolutionRow.innerHTML = `
                <td>EVOLUTION</td>
                <td>${currentLesion.diff_major_axis}</td>
                <td>Baseline</td>
                `;
            tbody.appendChild(evolutionRow);
        }

        table.appendChild(thead);
        table.appendChild(tbody);
        tableContainer.appendChild(table);

        return tableContainer;
    }

    reportMultiorgan[0].reportData.cyst_l_parts.forEach((lesion, indexLesion) => {
        const container = document.createElement('div');
        container.classList.add('lesion-container');
        var headerContainer = document.createElement('div');
        headerContainer.classList.add('title');
        var h1 = document.createElement('h4');
        h1.textContent = 'SYCAI Findings - Follow-up';
        headerContainer.appendChild(h1);
        var h2 = document.createElement('h2');
        h2.textContent = 'ORGAN Liver';
        headerContainer.appendChild(h2);
        var h5 = document.createElement('h5');
        var span = document.createElement('span');
        span.textContent = reportDataJson.seriesNumber || 'Series Number';
        h5.textContent = 'SeNo: ';
        h5.appendChild(span);
        headerContainer.appendChild(h5);
        container.appendChild(headerContainer);
        const imagesRow = document.createElement('div');
        imagesRow.classList.add('images-row');
        const currentSection = createLesionSection("Current", lesion, indexLesion, () => callUrlImage(lesion));
        imagesRow.appendChild(currentSection);
        const priorLesion = (reportMultiorgan[1] && reportMultiorgan[1].reportData && reportMultiorgan[1].reportData.cyst_l_parts) ? reportMultiorgan[1].reportData.cyst_l_parts[indexLesion] : null;
        const priorSection = createLesionSection("Prior", priorLesion, indexLesion, () => callUrlImage(priorLesion));
        if (priorSection) imagesRow.appendChild(priorSection);
        const tableContainer = createLesionTable(lesion, priorLesion);
        container.appendChild(imagesRow);
        container.appendChild(tableContainer);
        imagesContainer.appendChild(container);
    });
}


function fillKidneyLesionsCurrentPrior() {
    const imagesContainer = document.getElementById('images_kidney_container');

    function createImage(src, onClickHandler) {
        const img = document.createElement('img');
        const defaultImagePath = '/img/multiorgan/no_previous_lesion-no_bckg.png';
        img.src = src ? 'data:image/png;base64,' + src : defaultImagePath;
        img.addEventListener('click', onClickHandler);
        return img;
    }

    function createLesionSection(title, lesion, index, onClickHandler) {
        const section = document.createElement('div');
        section.classList.add('lesion-section');
        const header = document.createElement('p');
        const formattedDate = reportMultiorgan[0].reportData.date != null ? reportMultiorgan[0].reportData.date : 'No Date';
        header.textContent = `${title} (${formattedDate})`;
        header.classList.add('header');
        const lesionNumber = document.createElement('h4');
        lesionNumber.textContent = lesion ? `Finding K${index + 1}` : ""; // Ajuste de numeración para el riñón
        lesionNumber.classList.add('lesion-number');
        const imageSrc = lesion && lesion.image ? lesion.image : null;
        const image = createImage(imageSrc, onClickHandler);
        section.appendChild(lesionNumber);
        section.appendChild(image);
        section.appendChild(header);

        return section;
    }

    function createLesionTable(currentLesion, priorLesion) {
        const tableContainer = document.createElement('div');
        tableContainer.classList.add('table-container');
        const table = document.createElement('table');
        table.classList.add('lesion-table-chart');
        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th>PROPERTY</th>
                <th>CURRENT</th>
                ${priorLesion ? '<th>PRIOR</th>' : ''}
            </tr>
        `;

        const tbody = document.createElement('tbody');
        const rows = [
            { label: 'SLICE NUMBER', current: currentLesion.biggest_slice, prior: priorLesion ? priorLesion.biggest_slice : '-' },
            { label: 'VOLUME (mm&sup3)', current: currentLesion.voxels, prior: priorLesion ? priorLesion.voxels : '-' },
            { label: 'MAJOR AXIS (mm)', current: currentLesion.major_axis, prior: priorLesion ? priorLesion.major_axis : '-' },
            { label: 'POSITION', current: currentLesion.location, prior: priorLesion ? priorLesion.location : '-' },
        ];

        rows.forEach(row => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${row.label}</td>
                <td>${row.current || '-'}</td>
                ${priorLesion ? `<td>${row.prior || '-'}</td>` : ''}
            `;
            tbody.appendChild(tr);
        });

        if (priorLesion) {
            const evolutionRow = document.createElement('tr');
            evolutionRow.innerHTML = `
                <td>EVOLUTION</td>
                <td>${currentLesion.diff_major_axis}</td>
                <td>Baseline</td>
                `;
            tbody.appendChild(evolutionRow);
        }

        table.appendChild(thead);
        table.appendChild(tbody);
        tableContainer.appendChild(table);

        return tableContainer;
    }

    reportMultiorgan[0].reportData.cyst_k_parts.forEach((lesion, indexLesion) => {
        const container = document.createElement('div');
        container.classList.add('lesion-container');

        var headerContainer = document.createElement('div');
        headerContainer.classList.add('title');
        var h1 = document.createElement('h4');
        h1.textContent = 'SYCAI Findings - Follow-up';
        headerContainer.appendChild(h1);
        var h2 = document.createElement('h2');
        h2.textContent = 'ORGAN Kidney';
        headerContainer.appendChild(h2);
        var h5 = document.createElement('h5');
        var span = document.createElement('span');
        span.textContent = reportDataJson.seriesNumber || 'Series Number';
        h5.textContent = 'SeNo: ';
        h5.appendChild(span);
        headerContainer.appendChild(h5);
        container.appendChild(headerContainer);

        const imagesRow = document.createElement('div');
        imagesRow.classList.add('images-row');

        const currentSection = createLesionSection("Current", lesion, indexLesion, () => callUrlImage(lesion));
        imagesRow.appendChild(currentSection);

        const priorLesion = (reportMultiorgan[1] && reportMultiorgan[1].reportData && reportMultiorgan[1].reportData.cyst_k_parts)
            ? reportMultiorgan[1].reportData.cyst_k_parts[indexLesion]
            : null;

        if (priorLesion) {
            const priorSection = createLesionSection("Prior", priorLesion, indexLesion, () => callUrlImage(priorLesion));
            imagesRow.appendChild(priorSection);
        } else {
            const defaultSection = createLesionSection("Prior", null, indexLesion, () => {});
            imagesRow.appendChild(defaultSection);
        }

        const tableContainer = createLesionTable(lesion, priorLesion);
        container.appendChild(imagesRow);
        container.appendChild(tableContainer);

        imagesContainer.appendChild(container);
    });
}









/*document.addEventListener('DOMContentLoaded', function() {
    // Llamar a la función cuando se cargue el contenido de la página
    fillLiverLesionInfo();
    fillLiverLesionsCurrentPrior();
    fillPancreasLesionInfo();
    fillPancreasLesionsCurrentPrior();
    fillKidneyLesionInfo();
    fillKidneyLesionsCurrentPrior();
});*/

function assignLesionIdentifiers(tableClass) {
    const tables = document.querySelectorAll(`.${tableClass}`);

    tables.forEach(table => {
        const rows = table.querySelectorAll("tbody tr");
        const totalRows = rows.length;

        let currentLesionCounter = 1;
        let priorLesionCounter = 1;
        const halfRows = Math.ceil(totalRows / 2); // Dividir las filas en mitades

        let sizeLesionsCurrent = 0;
        if (tableClass == "kidney"){
            sizeLesionsCurrent = reportMultiorgan[0].reportData.cyst_k_parts.length;
        }else if (tableClass == "liver"){
            sizeLesionsCurrent = reportMultiorgan[0].reportData.cyst_l_parts.length;
        }else if (tableClass == "pancreas"){
            sizeLesionsCurrent = reportMultiorgan[0].reportData.cyst_p_parts.length;
        }
        sizeLesionsPrior = (sizeLesionsCurrent * 2);


        /*rows.forEach((row, index) => {
            const identifierCell = row.querySelector("td:last-child");
            let identifier;

            if (index < sizeLesionsCurrent) {
                identifier = `current lesion ${currentLesionCounter}`;
                currentLesionCounter++;
            } else if(index < sizeLesionsPrior ){
                identifier = `prior lesion ${priorLesionCounter}`;
                priorLesionCounter++;
            }

            identifierCell.textContent = identifier;
        });*/
    });
}



// Llamar a la función para asignar los identificadores después de cargar la página
document.addEventListener("DOMContentLoaded", function() {
    assignLesionIdentifiers("liver");
    assignLesionIdentifiers("kidney");
    assignLesionIdentifiers("pancreas");
});



function addLesionLabelsLiver() {
    const rows = document.querySelectorAll(".lesion-table-chart.liver tbody tr");
    rows.forEach((row, index) => {
        const lesionCell = document.createElement("td");
        lesionCell.textContent = `L${index + 1}`;
        row.insertBefore(lesionCell, row.firstChild);
    });
}

function addLesionLabelsKidney() {
    const rows = document.querySelectorAll(".lesion-table-chart.kidney tbody tr");
    rows.forEach((row, index) => {
        const lesionCell = document.createElement("td");
        lesionCell.textContent = `K${index + 1}`;
        row.insertBefore(lesionCell, row.firstChild);
    });
}

function addLesionLabelsPancreas() {
    const rows = document.querySelectorAll(".lesion-table-chart.pancreas tbody tr");
    rows.forEach((row, index) => {
        const lesionCell = document.createElement("td");
        lesionCell.textContent = `P${index + 1}`;
        row.insertBefore(lesionCell, row.firstChild);
    });
}



document.addEventListener('DOMContentLoaded', (event) => {
    addLesionLabelsLiver();
    addLesionLabelsKidney();
    addLesionLabelsPancreas();
});

document.addEventListener('DOMContentLoaded', () => {
    // Función para ocultar duplicados
    function hideDuplicates(containerId) {
        const containers = document.querySelectorAll(`#${containerId}`);
        if (containers.length > 1) {
            for (let i = 1; i < containers.length; i++) {
                containers[i].style.display = 'none';
            }
        }
    }

    // Llamar a la función para cada tipo de órgano
    hideDuplicates('liver-container');
    hideDuplicates('kidney-container-left');
    hideDuplicates('kidney-container-right');
    hideDuplicates('pancreas-container');
});


document.addEventListener('DOMContentLoaded', function() {
    try {
        fillLiverLesionInfo();
    } catch (error) {
        console.error("Error en fillLiverLesionInfo:", error);
    }

    try {
        fillLiverLesionsCurrentPrior();
    } catch (error) {
        console.error("Error en fillLiverLesionsCurrentPrior:", error);
    }

    try {
        fillPancreasLesionInfo();
    } catch (error) {
        console.error("Error en fillPancreasLesionInfo:", error);
    }

    try {
        fillPancreasLesionsCurrentPrior();
    } catch (error) {
        console.error("Error en fillPancreasLesionsCurrentPrior:", error);
    }

    try {
        fillKidneyLesionInfo();
    } catch (error) {
        console.error("Error en fillKidneyLesionInfo:", error);
    }

    try {
        fillKidneyLesionsCurrentPrior();
    } catch (error) {
        console.error("Error en fillKidneyLesionsCurrentPrior:", error);
    }
});




